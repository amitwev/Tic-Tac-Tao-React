{"version":3,"sources":["Components/Card/Card.js","Components/Board/Board.js","Components/GameLogic/GameLogic.js","App.js","serviceWorker.js","index.js"],"names":["Card","value","playerClickOnCard","className","onClick","Board","boardCards","winner","renderCard","index","disable","id","require","GameLogic","useState","Array","fill","setBoardCards","playerXturn","setPlayerXturn","someoneIsWinner","winnerCombination","i","length","a","b","c","status","cardsArr","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAWeA,MATF,EAAGC,QAAOC,uBAEf,4BAAQC,UAAW,OACXC,QAASF,GACZD,GC8BEI,MAhCD,EAAGC,aAAYJ,oBAAmBK,aAC5C,MAAMC,EAAcC,GACT,kBAAC,EAAD,CACCR,MAAOK,EAAWG,GAClBC,QAASH,EACTL,kBAAmB,IACfA,EAAkBO,KAGlC,OACI,6BACG,yBAAKE,GAAI,aACJ,yBAAKR,UAAW,YACXK,EAAW,GACXA,EAAW,GACXA,EAAW,IAEhB,yBAAKL,UAAW,YACXK,EAAW,GACXA,EAAW,GACXA,EAAW,IAEhB,yBAAKL,UAAW,YACXK,EAAW,GACXA,EAAW,GACXA,EAAW,O,MC1BfI,EAAQ,IAiEVC,MA9DG,KAAM,QAEkBC,mBAASC,MAAM,GAAGC,KAAK,OAFzC,mBAEZV,EAFY,KAEAW,EAFA,OAGmBH,oBAAS,GAH5B,mBAGZI,EAHY,KAGCC,EAHD,KAcdC,EAAmBd,IAErB,MAAMe,EAAoB,CACtB,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAET,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAkBE,OAAQD,IAAK,CAAC,MAAD,cAC3BD,EAAkBC,GADS,GACvCE,EADuC,KACpCC,EADoC,KACjCC,EADiC,KAE/C,GAAGpB,EAAWkB,IACVlB,EAAWkB,KAAOlB,EAAWmB,IAC7BnB,EAAWmB,KAAOnB,EAAWoB,GAC7B,OAAOpB,EAAWkB,GAG1B,OAAO,GAELjB,EAASa,EAAgBd,GAa/B,IAAIqB,EAXGpB,EAMO,aAAN,OAAoBA,EAApB,KAEM,UAAN,OAAiBW,EAAc,IAAM,IAArC,SAIR,OACI,6BACI,yBAAKP,GAAI,UAAWgB,GACpB,kBAAC,EAAD,CAAQhB,GAAE,QACFJ,OAAQA,EACRL,kBAlDWO,IACvB,MAAMmB,EAAW,IAAItB,GAClBc,EAAgBQ,IAAaA,EAASnB,KAGzCmB,EAASnB,GAASS,EAAc,IAAM,IACtCD,EAAcW,GACdT,GAAgBD,KA4CJZ,WAAYA,MCnDjBuB,MARH,IAEJ,6BACI,kBAAC,EAAD,OCMQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.d448e665.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\nconst Card = ({ value, playerClickOnCard }) => {\r\n    return(\r\n        <button className={'card'} \r\n                onClick={playerClickOnCard}>\r\n            {value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './board.css';\r\nimport Card from '../Card/Card';\r\n\r\nconst Board = ({ boardCards, playerClickOnCard ,winner }) =>{\r\n    const renderCard = (index) => {\r\n        return <Card \r\n                value={boardCards[index]} \r\n                disable={winner}\r\n                playerClickOnCard={() => \r\n                    playerClickOnCard(index)\r\n                }/>\r\n    }\r\n    return(\r\n        <div> \r\n           <div id={'mainBoard'}>\r\n                <div className={'boardRow'}>\r\n                    {renderCard(0)}\r\n                    {renderCard(1)}\r\n                    {renderCard(2)}\r\n                </div >\r\n                <div className={'boardRow'}>\r\n                    {renderCard(3)}\r\n                    {renderCard(4)}\r\n                    {renderCard(5)}\r\n                </div>\r\n                <div className={'boardRow'}>\r\n                    {renderCard(6)}\r\n                    {renderCard(7)}\r\n                    {renderCard(8)}\r\n                </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board; ","import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nconst confetti = require('canvas-confetti');\r\n\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n    }\r\n    const someoneIsWinner = (boardCards) => {\r\n        //Winner Combination\r\n        const winnerCombination = [\r\n            [0,1,2], //V rows first \r\n            [3,4,5], //V rows mid \r\n            [6,7,8],//V  rows last \r\n            [0,3,6],//V cols left\r\n            [1,4,7], //V cols mid\r\n            [2,5,8], //V  cols right\r\n            [0,4,8], //V X left to right\r\n            [2,4,6] //X X right to left \r\n        ]; \r\n        for (let i = 0; i < winnerCombination.length; i++) {\r\n            const [ a, b, c ] = winnerCombination[i];\r\n            if(boardCards[a] && \r\n                boardCards[a] === boardCards[b] && \r\n                boardCards[b] === boardCards[c]) {\r\n                return boardCards[a];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    const winner = someoneIsWinner(boardCards); \r\n    const checkStatus = () => {\r\n        if(winner){\r\n            // confetti({\r\n            //     particleCount: 100,\r\n            //     spread: 70,\r\n            //     origin: { y: 0.6 }\r\n            // });\r\n            return `Winner is ${winner}!`;\r\n        } else{\r\n            return `Player ${playerXturn ? 'X' : 'O'} turn`;\r\n        }\r\n    }\r\n    let status = checkStatus(); \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameLogic;","import React from 'react'; \r\nimport GameLogic from './Components/GameLogic/GameLogic'\r\n\r\nconst App = () => {\r\n    return(\r\n        <div>\r\n            <GameLogic />   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}