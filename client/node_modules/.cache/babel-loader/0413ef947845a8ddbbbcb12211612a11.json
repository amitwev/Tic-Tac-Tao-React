{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\src\\\\Components\\\\GameLogic\\\\GameLogic.js\";\nimport React, { useState } from 'react';\nimport Board from '../Board/Board';\nimport './GameLogic.css';\n\nconst GameLogic = () => {\n  //Init state for board and player turn\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isAgainstComputer = _useState2[0],\n        setIsAgainstComputer = _useState2[1];\n\n  const _useState3 = useState(Array(9).fill(null)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        boardCards = _useState4[0],\n        setBoardCards = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        playerXturn = _useState6[0],\n        setPlayerXturn = _useState6[1]; //Player on click function\n\n\n  const playerClickOnCard = index => {\n    const cardsArr = [...boardCards];\n\n    if (someoneIsWinner(cardsArr) || cardsArr[index]) {\n      return;\n    }\n\n    cardsArr[index] = playerXturn ? 'X' : 'O';\n    setBoardCards(cardsArr);\n    setPlayerXturn(!playerXturn);\n  };\n\n  const resetBoard = () => {\n    setBoardCards(Array(9).fill(null));\n    setPlayerXturn(true);\n  };\n\n  const computerPlayer = () => {};\n\n  const someoneIsWinner = boardCards => {\n    //Winner Combination\n    const winnerCombination = [[0, 1, 2], //V rows first \n    [3, 4, 5], //V rows mid \n    [6, 7, 8], //V  rows last \n    [0, 3, 6], //V cols left\n    [1, 4, 7], //V cols mid\n    [2, 5, 8], //V  cols right\n    [0, 4, 8], //V X left to right\n    [2, 4, 6] //X X right to left \n    ]; //to determine if arr full - def = true\n\n    let isArrayFull = true;\n\n    for (let i = 0; i < winnerCombination.length; i++) {\n      const _winnerCombination$i = _slicedToArray(winnerCombination[i], 3),\n            a = _winnerCombination$i[0],\n            b = _winnerCombination$i[1],\n            c = _winnerCombination$i[2];\n\n      if ((boardCards[a] === null || boardCards[b] === null || boardCards[c] === null) && isArrayFull) {\n        isArrayFull = false;\n      }\n\n      if (boardCards[a] && boardCards[a] === boardCards[b] && boardCards[b] === boardCards[c]) {\n        return boardCards[a];\n      }\n    }\n\n    return isArrayFull ? 'undefined' : false;\n  };\n\n  const winner = someoneIsWinner(boardCards);\n\n  const checkStatus = () => {\n    if (winner === 'undefined') {\n      return \"Winner is \".concat(winner, \"!\");\n    } else if (winner) {\n      return \"No one won, it's a tie!\";\n    } else {\n      return \"Player \".concat(playerXturn ? 'X' : 'O', \" turn\");\n    }\n  };\n\n  let status = checkStatus();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: 'status',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, status), React.createElement(Board, {\n    id: \"board\",\n    winner: winner,\n    playerClickOnCard: playerClickOnCard,\n    boardCards: boardCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: resetBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Reset Board\"));\n};\n\nexport default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","Board","GameLogic","isAgainstComputer","setIsAgainstComputer","Array","fill","boardCards","setBoardCards","playerXturn","setPlayerXturn","playerClickOnCard","index","cardsArr","someoneIsWinner","resetBoard","computerPlayer","winnerCombination","isArrayFull","i","length","a","b","c","winner","checkStatus","status"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\n\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ isAgainstComputer, setIsAgainstComputer] = useState(true);\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n\r\n    }\r\n    const resetBoard = () => {\r\n        setBoardCards(Array(9).fill(null));\r\n        setPlayerXturn(true);\r\n    }\r\n    const computerPlayer =() => {\r\n\r\n    }\r\n    const someoneIsWinner = (boardCards) => {\r\n        //Winner Combination\r\n        const winnerCombination = [\r\n            [0,1,2], //V rows first \r\n            [3,4,5], //V rows mid \r\n            [6,7,8],//V  rows last \r\n            [0,3,6],//V cols left\r\n            [1,4,7], //V cols mid\r\n            [2,5,8], //V  cols right\r\n            [0,4,8], //V X left to right\r\n            [2,4,6] //X X right to left \r\n        ]; \r\n        //to determine if arr full - def = true\r\n        let isArrayFull = true;\r\n\r\n        for (let i = 0; i < winnerCombination.length; i++) {\r\n            const [ a, b, c ] = winnerCombination[i];\r\n            if((boardCards[a] === null || boardCards[b] === null || boardCards[c] === null) && isArrayFull){\r\n                isArrayFull = false; \r\n            }\r\n            if(boardCards[a] && \r\n                boardCards[a] === boardCards[b] && \r\n                boardCards[b] === boardCards[c]) {\r\n                return boardCards[a];\r\n            }\r\n        }\r\n        return isArrayFull \r\n                ? 'undefined'\r\n                : false;\r\n    }\r\n    const winner = someoneIsWinner(boardCards); \r\n    const checkStatus = () => {\r\n        if(winner === 'undefined'){\r\n            return `Winner is ${winner}!`;\r\n        }else if(winner){\r\n            return `No one won, it's a tie!`\r\n        }else{\r\n            return `Player ${playerXturn ? 'X' : 'O'} turn`;\r\n        }\r\n    }\r\n    let status = checkStatus(); \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/>\r\n            <button onClick={resetBoard}>Reset Board</button>\r\n        </div>\r\n    )\r\n}\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}