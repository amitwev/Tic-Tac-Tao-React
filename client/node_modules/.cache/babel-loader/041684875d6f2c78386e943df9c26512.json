{"ast":null,"code":"import _slicedToArray from\"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import Board from'../Board/Board';import'./GameLogic.css';const confetti=require('canvas-confetti');const GameLogic=()=>{//Init state for board and player turn\nconst _useState=useState(Array(9).fill(null)),_useState2=_slicedToArray(_useState,2),boardCards=_useState2[0],setBoardCards=_useState2[1];const _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),playerXturn=_useState4[0],setPlayerXturn=_useState4[1];//Player on click function\nconst playerClickOnCard=index=>{const cardsArr=[...boardCards];if(someoneIsWinner(cardsArr)||cardsArr[index]){return;}cardsArr[index]=playerXturn?'X':'O';setBoardCards(cardsArr);setPlayerXturn(!playerXturn);};const someoneIsWinner=boardCards=>{//Winner Combination\nconst winnerCombination=[[0,1,2],//V rows first \n[3,4,5],//V rows mid \n[6,7,8],//V  rows last \n[0,3,6],//V cols left\n[1,4,7],//V cols mid\n[2,5,8],//V  cols right\n[0,4,8],//V X left to right\n[2,4,6]//X X right to left \n];for(let i=0;i<winnerCombination.length;i++){const _winnerCombination$i=_slicedToArray(winnerCombination[i],3),a=_winnerCombination$i[0],b=_winnerCombination$i[1],c=_winnerCombination$i[2];if(boardCards[a]&&boardCards[a]===boardCards[b]&&boardCards[b]===boardCards[c]){return boardCards[a];}}return false;};const winner=someoneIsWinner(boardCards);const checkStatus=()=>{if(winner){// confetti({\n//     particleCount: 100,\n//     spread: 70,\n//     origin: { y: 0.6 }\n// });\nreturn\"Winner is \".concat(winner,\"!\");}else{return\"Player \".concat(playerXturn?'X':'O',\" turn\");}};let status=checkStatus();return React.createElement(\"div\",null,React.createElement(\"div\",{id:'status'},status),React.createElement(Board,{id:\"board\",winner:winner,playerClickOnCard:playerClickOnCard,boardCards:boardCards}));};export default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","Board","confetti","require","GameLogic","Array","fill","boardCards","setBoardCards","playerXturn","setPlayerXturn","playerClickOnCard","index","cardsArr","someoneIsWinner","winnerCombination","i","length","a","b","c","winner","checkStatus","status"],"mappings":"6KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CACA,MAAO,iBAAP,CACA,KAAMC,CAAAA,QAAQ,CAAGC,OAAO,CAAC,iBAAD,CAAxB,CAGA,KAAMC,CAAAA,SAAS,CAAG,IAAM,CACpB;AADoB,gBAEkBJ,QAAQ,CAACK,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAF1B,wCAEZC,UAFY,eAEAC,aAFA,gCAGmBR,QAAQ,CAAC,IAAD,CAH3B,yCAGZS,WAHY,eAGCC,cAHD,eAIpB;AACA,KAAMC,CAAAA,iBAAiB,CAAIC,KAAD,EAAW,CACjC,KAAMC,CAAAA,QAAQ,CAAG,CAAC,GAAGN,UAAJ,CAAjB,CACA,GAAGO,eAAe,CAACD,QAAD,CAAf,EAA6BA,QAAQ,CAACD,KAAD,CAAxC,CAAgD,CAC5C,OACH,CACDC,QAAQ,CAACD,KAAD,CAAR,CAAkBH,WAAW,CAAG,GAAH,CAAS,GAAtC,CACAD,aAAa,CAACK,QAAD,CAAb,CACAH,cAAc,CAAC,CAACD,WAAF,CAAd,CACH,CARD,CASA,KAAMK,CAAAA,eAAe,CAAIP,UAAD,EAAgB,CACpC;AACA,KAAMQ,CAAAA,iBAAiB,CAAG,CACtB,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CADsB,CACb;AACT,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAFsB,CAEb;AACT,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAHsB,CAGd;AACR,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAJsB,CAId;AACR,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CALsB,CAKb;AACT,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CANsB,CAMb;AACT,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAPsB,CAOb;AACT,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAQ;AARc,CAA1B,CAUA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,iBAAiB,CAACE,MAAtC,CAA8CD,CAAC,EAA/C,CAAmD,2CAC3BD,iBAAiB,CAACC,CAAD,CADU,IACvCE,CADuC,yBACpCC,CADoC,yBACjCC,CADiC,yBAE/C,GAAGb,UAAU,CAACW,CAAD,CAAV,EACCX,UAAU,CAACW,CAAD,CAAV,GAAkBX,UAAU,CAACY,CAAD,CAD7B,EAECZ,UAAU,CAACY,CAAD,CAAV,GAAkBZ,UAAU,CAACa,CAAD,CAFhC,CAEqC,CACjC,MAAOb,CAAAA,UAAU,CAACW,CAAD,CAAjB,CACH,CACJ,CACD,MAAO,MAAP,CACH,CArBD,CAsBA,KAAMG,CAAAA,MAAM,CAAGP,eAAe,CAACP,UAAD,CAA9B,CACA,KAAMe,CAAAA,WAAW,CAAG,IAAM,CACtB,GAAGD,MAAH,CAAU,CACN;AACA;AACA;AACA;AACA;AACA,0BAAoBA,MAApB,MACH,CAPD,IAOM,CACF,uBAAiBZ,WAAW,CAAG,GAAH,CAAS,GAArC,UACH,CACJ,CAXD,CAYA,GAAIc,CAAAA,MAAM,CAAGD,WAAW,EAAxB,CACA,MACI,gCACI,2BAAK,EAAE,CAAE,QAAT,EAAoBC,MAApB,CADJ,CAEI,oBAAC,KAAD,EAAQ,EAAE,QAAV,CACQ,MAAM,CAAEF,MADhB,CAEQ,iBAAiB,CAAEV,iBAF3B,CAGQ,UAAU,CAAEJ,UAHpB,EAFJ,CADJ,CAUH,CA5DD,CA8DA,cAAeH,CAAAA,SAAf","sourcesContent":["import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nconst confetti = require('canvas-confetti');\r\n\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n    }\r\n    const someoneIsWinner = (boardCards) => {\r\n        //Winner Combination\r\n        const winnerCombination = [\r\n            [0,1,2], //V rows first \r\n            [3,4,5], //V rows mid \r\n            [6,7,8],//V  rows last \r\n            [0,3,6],//V cols left\r\n            [1,4,7], //V cols mid\r\n            [2,5,8], //V  cols right\r\n            [0,4,8], //V X left to right\r\n            [2,4,6] //X X right to left \r\n        ]; \r\n        for (let i = 0; i < winnerCombination.length; i++) {\r\n            const [ a, b, c ] = winnerCombination[i];\r\n            if(boardCards[a] && \r\n                boardCards[a] === boardCards[b] && \r\n                boardCards[b] === boardCards[c]) {\r\n                return boardCards[a];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    const winner = someoneIsWinner(boardCards); \r\n    const checkStatus = () => {\r\n        if(winner){\r\n            // confetti({\r\n            //     particleCount: 100,\r\n            //     spread: 70,\r\n            //     origin: { y: 0.6 }\r\n            // });\r\n            return `Winner is ${winner}!`;\r\n        } else{\r\n            return `Player ${playerXturn ? 'X' : 'O'} turn`;\r\n        }\r\n    }\r\n    let status = checkStatus(); \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}