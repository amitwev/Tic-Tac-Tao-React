{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\src\\\\Components\\\\GameLogic\\\\GameLogic.js\";\nimport React, { useState } from 'react';\nimport Board from '../Board/Board';\nimport './GameLogic.css';\n\nconst confetti = require('canvas-confetti');\n\nconst GameLogic = () => {\n  //Init state for board and player turn\n  const _useState = useState(Array(9).fill(null)),\n        _useState2 = _slicedToArray(_useState, 2),\n        boardCards = _useState2[0],\n        setBoardCards = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        playerXturn = _useState4[0],\n        setPlayerXturn = _useState4[1]; //Player on click function\n\n\n  const playerClickOnCard = index => {\n    const cardsArr = [...boardCards];\n\n    if (someoneIsWinner(cardsArr) || cardsArr[index]) {\n      return;\n    }\n\n    cardsArr[index] = playerXturn ? 'X' : 'O';\n    setBoardCards(cardsArr);\n    setPlayerXturn(!playerXturn);\n  };\n\n  const someoneIsWinner = boardCards => {\n    //Winner Combination\n    const winnerCombination = [[0, 1, 2], //V rows first \n    [3, 4, 5], //V rows mid \n    [6, 7, 8], //V  rows last \n    [0, 3, 6], //V cols left\n    [1, 4, 7], //V cols mid\n    [2, 5, 8], //V  cols right\n    [0, 4, 8], //V X left to right\n    [2, 4, 6] //X X right to left \n    ];\n\n    for (let i = 0; i < winnerCombination.length; i++) {\n      const _winnerCombination$i = _slicedToArray(winnerCombination[i], 3),\n            a = _winnerCombination$i[0],\n            b = _winnerCombination$i[1],\n            c = _winnerCombination$i[2];\n\n      if (boardCards[a] && boardCards[a] === boardCards[b] && boardCards[b] === boardCards[c]) {\n        return boardCards[a];\n      }\n    }\n\n    return false;\n  };\n\n  const winner = someoneIsWinner(boardCards);\n\n  const checkStatus = () => {\n    if (winner) {\n      // confetti({\n      //     particleCount: 100,\n      //     spread: 70,\n      //     origin: { y: 0.6 }\n      // });\n      return \"Winner is \".concat(winner, \"!\");\n    } else {\n      return \"Player \".concat(playerXturn ? 'X' : 'O', \" turn\");\n    }\n  };\n\n  let status = checkStatus();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: 'status',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, status), React.createElement(Board, {\n    id: \"board\",\n    winner: winner,\n    playerClickOnCard: playerClickOnCard,\n    boardCards: boardCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n};\n\nexport default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","Board","confetti","require","GameLogic","Array","fill","boardCards","setBoardCards","playerXturn","setPlayerXturn","playerClickOnCard","index","cardsArr","someoneIsWinner","winnerCombination","i","length","a","b","c","winner","checkStatus","status"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nconst confetti = require('canvas-confetti');\r\n\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n    }\r\n    const someoneIsWinner = (boardCards) => {\r\n        //Winner Combination\r\n        const winnerCombination = [\r\n            [0,1,2], //V rows first \r\n            [3,4,5], //V rows mid \r\n            [6,7,8],//V  rows last \r\n            [0,3,6],//V cols left\r\n            [1,4,7], //V cols mid\r\n            [2,5,8], //V  cols right\r\n            [0,4,8], //V X left to right\r\n            [2,4,6] //X X right to left \r\n        ]; \r\n        for (let i = 0; i < winnerCombination.length; i++) {\r\n            const [ a, b, c ] = winnerCombination[i];\r\n            if(boardCards[a] && \r\n                boardCards[a] === boardCards[b] && \r\n                boardCards[b] === boardCards[c]) {\r\n                return boardCards[a];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    const winner = someoneIsWinner(boardCards); \r\n    const checkStatus = () => {\r\n        if(winner){\r\n            // confetti({\r\n            //     particleCount: 100,\r\n            //     spread: 70,\r\n            //     origin: { y: 0.6 }\r\n            // });\r\n            return `Winner is ${winner}!`;\r\n        } else{\r\n            return `Player ${playerXturn ? 'X' : 'O'} turn`;\r\n        }\r\n    }\r\n    let status = checkStatus(); \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}