{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport default Status = () => {\n  const someoneIsWinner = boardCards => {\n    //Winner Combination\n    const winnerCombination = [[0, 1, 2], //V rows first \n    [3, 4, 5], //V rows mid \n    [6, 7, 8], //V  rows last \n    [0, 3, 6], //V cols left\n    [1, 4, 7], //V cols mid\n    [2, 5, 8], //V  cols right\n    [0, 4, 8], //V X left to right\n    [2, 4, 6] //X X right to left \n    ]; //to determine if arr full - def = true\n\n    let isArrayFull = true;\n\n    for (let i = 0; i < winnerCombination.length; i++) {\n      const _winnerCombination$i = _slicedToArray(winnerCombination[i], 3),\n            a = _winnerCombination$i[0],\n            b = _winnerCombination$i[1],\n            c = _winnerCombination$i[2];\n\n      if ((boardCards[a] === null || boardCards[b] === null || boardCards[c] === null) && isArrayFull) {\n        isArrayFull = false;\n      }\n\n      if (boardCards[a] && boardCards[a] === boardCards[b] && boardCards[b] === boardCards[c]) {\n        return boardCards[a];\n      }\n    }\n\n    return isArrayFull ? 'undefined' : false;\n  };\n\n  const checkStatus = () => {\n    if (winner === 'undefined') {\n      return \"No one won, it's a tie!\";\n    } else if (winner) {\n      return \"Winner is \".concat(winner, \"!\");\n    } else {\n      return \"Player \".concat(playerXturn ? 'X' : 'O', \" turn\");\n    }\n  };\n};","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/Status.js"],"names":["Status","someoneIsWinner","boardCards","winnerCombination","isArrayFull","i","length","a","b","c","checkStatus","winner","playerXturn"],"mappings":";AACA,eAAeA,MAAM,GAAG,MAAM;AAC1B,QAAMC,eAAe,GAAIC,UAAD,IAAgB;AACpC;AACA,UAAMC,iBAAiB,GAAG,CACtB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADsB,EACb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFsB,EAEb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHsB,EAGd;AACR,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJsB,EAId;AACR,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CALsB,EAKb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CANsB,EAMb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPsB,EAOb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARsB,CAQd;AARc,KAA1B,CAFoC,CAYpC;;AACA,QAAIC,WAAW,GAAG,IAAlB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,iBAAiB,CAACG,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAAA,kDAC3BF,iBAAiB,CAACE,CAAD,CADU;AAAA,YACvCE,CADuC;AAAA,YACpCC,CADoC;AAAA,YACjCC,CADiC;;AAE/C,UAAG,CAACP,UAAU,CAACK,CAAD,CAAV,KAAkB,IAAlB,IAA0BL,UAAU,CAACM,CAAD,CAAV,KAAkB,IAA5C,IAAoDN,UAAU,CAACO,CAAD,CAAV,KAAkB,IAAvE,KAAgFL,WAAnF,EAA+F;AAC3FA,QAAAA,WAAW,GAAG,KAAd;AACH;;AACD,UAAGF,UAAU,CAACK,CAAD,CAAV,IACCL,UAAU,CAACK,CAAD,CAAV,KAAkBL,UAAU,CAACM,CAAD,CAD7B,IAECN,UAAU,CAACM,CAAD,CAAV,KAAkBN,UAAU,CAACO,CAAD,CAFhC,EAEqC;AACjC,eAAOP,UAAU,CAACK,CAAD,CAAjB;AACH;AACJ;;AACD,WAAOH,WAAW,GACR,WADQ,GAER,KAFV;AAGH,GA7BD;;AA8BA,QAAMM,WAAW,GAAG,MAAM;AACtB,QAAGC,MAAM,KAAK,WAAd,EAA0B;AACtB;AACH,KAFD,MAEM,IAAGA,MAAH,EAAU;AACZ,iCAAoBA,MAApB;AACH,KAFK,MAED;AACD,8BAAiBC,WAAW,GAAG,GAAH,GAAS,GAArC;AACH;AACJ,GARD;AASH,CAxCD","sourcesContent":["\r\nexport default Status = () => {\r\n    const someoneIsWinner = (boardCards) => {\r\n        //Winner Combination\r\n        const winnerCombination = [\r\n            [0,1,2], //V rows first \r\n            [3,4,5], //V rows mid \r\n            [6,7,8],//V  rows last \r\n            [0,3,6],//V cols left\r\n            [1,4,7], //V cols mid\r\n            [2,5,8], //V  cols right\r\n            [0,4,8], //V X left to right\r\n            [2,4,6] //X X right to left \r\n        ]; \r\n        //to determine if arr full - def = true\r\n        let isArrayFull = true;\r\n\r\n        for (let i = 0; i < winnerCombination.length; i++) {\r\n            const [ a, b, c ] = winnerCombination[i];\r\n            if((boardCards[a] === null || boardCards[b] === null || boardCards[c] === null) && isArrayFull){\r\n                isArrayFull = false; \r\n            }\r\n            if(boardCards[a] && \r\n                boardCards[a] === boardCards[b] && \r\n                boardCards[b] === boardCards[c]) {\r\n                return boardCards[a];\r\n            }\r\n        }\r\n        return isArrayFull \r\n                ? 'undefined'\r\n                : false;\r\n    }\r\n    const checkStatus = () => {\r\n        if(winner === 'undefined'){\r\n            return `No one won, it's a tie!`;\r\n        }else if(winner){\r\n            return `Winner is ${winner}!`\r\n        }else{\r\n            return `Player ${playerXturn ? 'X' : 'O'} turn`;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}