{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\src\\\\Components\\\\GameLogic\\\\GameLogic.js\";\nimport React, { useState } from 'react';\nimport Board from '../Board/Board';\nimport './GameLogic.css';\nimport Status from './Status';\n\nconst GameLogic = () => {\n  //Init state for board and player turn\n  const _useState = useState(Array(9).fill(null)),\n        _useState2 = _slicedToArray(_useState, 2),\n        boardCards = _useState2[0],\n        setBoardCards = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        playerXturn = _useState4[0],\n        setPlayerXturn = _useState4[1]; //Player on click function\n\n\n  const playerClickOnCard = index => {\n    const cardsArr = [...boardCards];\n\n    if (Status.someoneIsWinner(cardsArr) || cardsArr[index]) {\n      return;\n    } //put value in the arr depends on player\n\n\n    cardsArr[index] = playerXturn ? 'X' : 'O'; //update params\n\n    setBoardCards(cardsArr);\n    setPlayerXturn(!playerXturn);\n  }; //Reset Board\n\n\n  const resetBoard = () => {\n    setBoardCards(Array(9).fill(null));\n    setPlayerXturn(true);\n  }; //Computer turn\n\n\n  const computerTurn = () => {\n    if (!playerXturn) {\n      console.log(\"inside if inside computer turn\");\n    }\n  }; //Game run\n\n\n  const winner = Status.someoneIsWinner(boardCards);\n  let status = Status.checkStatus(winner, playerXturn);\n  computerTurn();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: 'status',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, status), React.createElement(Board, {\n    id: \"board\",\n    winner: winner,\n    playerClickOnCard: playerClickOnCard,\n    boardCards: boardCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: resetBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Reset Board\"));\n};\n\nexport default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","Board","Status","GameLogic","Array","fill","boardCards","setBoardCards","playerXturn","setPlayerXturn","playerClickOnCard","index","cardsArr","someoneIsWinner","resetBoard","computerTurn","console","log","winner","status","checkStatus"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB;AADoB,oBAEkBH,QAAQ,CAACI,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAF1B;AAAA;AAAA,QAEZC,UAFY;AAAA,QAEAC,aAFA;;AAAA,qBAGmBP,QAAQ,CAAC,IAAD,CAH3B;AAAA;AAAA,QAGZQ,WAHY;AAAA,QAGCC,cAHD,kBAKpB;;;AACA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,UAAMC,QAAQ,GAAG,CAAC,GAAGN,UAAJ,CAAjB;;AACA,QAAGJ,MAAM,CAACW,eAAP,CAAuBD,QAAvB,KAAoCA,QAAQ,CAACD,KAAD,CAA/C,EAAuD;AACnD;AACH,KAJgC,CAMjC;;;AACAC,IAAAA,QAAQ,CAACD,KAAD,CAAR,GAAkBH,WAAW,GAAG,GAAH,GAAS,GAAtC,CAPiC,CASjC;;AACAD,IAAAA,aAAa,CAACK,QAAD,CAAb;AACAH,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAEH,GAbD,CANoB,CAqBpB;;;AACA,QAAMM,UAAU,GAAG,MAAM;AACrBP,IAAAA,aAAa,CAACH,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAb;AACAI,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAHD,CAtBoB,CA0BpB;;;AACA,QAAMM,YAAY,GAAG,MAAM;AACvB,QAAG,CAACP,WAAJ,EAAgB;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH;AACJ,GAJD,CA3BoB,CAiCpB;;;AACA,QAAMC,MAAM,GAAGhB,MAAM,CAACW,eAAP,CAAuBP,UAAvB,CAAf;AACA,MAAIa,MAAM,GAAGjB,MAAM,CAACkB,WAAP,CAAmBF,MAAnB,EAA2BV,WAA3B,CAAb;AACAO,EAAAA,YAAY;AACZ,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,EAAE,EAAE,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBI,MAApB,CADJ,EAEI,oBAAC,KAAD;AAAQ,IAAA,EAAE,SAAV;AACQ,IAAA,MAAM,EAAED,MADhB;AAEQ,IAAA,iBAAiB,EAAER,iBAF3B;AAGQ,IAAA,UAAU,EAAEJ,UAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAMI;AAAQ,IAAA,OAAO,EAAEQ,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANJ,CADJ;AAUH,CA/CD;;AAgDA,eAAeX,SAAf","sourcesContent":["import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nimport Status from './Status';\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n\r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(Status.someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n\r\n        //put value in the arr depends on player\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        \r\n        //update params\r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n\r\n    }\r\n\r\n    //Reset Board\r\n    const resetBoard = () => {\r\n        setBoardCards(Array(9).fill(null));\r\n        setPlayerXturn(true);\r\n    }\r\n    //Computer turn\r\n    const computerTurn = () => {\r\n        if(!playerXturn){\r\n            console.log(\"inside if inside computer turn\")\r\n        }\r\n    }\r\n\r\n    //Game run\r\n    const winner = Status.someoneIsWinner(boardCards); \r\n    let status = Status.checkStatus(winner, playerXturn); \r\n    computerTurn(); \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/>\r\n            <button onClick={resetBoard}>Reset Board</button>\r\n        </div>\r\n    )\r\n}\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}