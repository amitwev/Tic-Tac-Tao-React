{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport default {\n  someoneIsWinner(boardCards) {\n    //Winner Combination\n    const winnerCombination = [[0, 1, 2], //V rows first \n    [3, 4, 5], //V rows mid \n    [6, 7, 8], //V  rows last \n    [0, 3, 6], //V cols left\n    [1, 4, 7], //V cols mid\n    [2, 5, 8], //V  cols right\n    [0, 4, 8], //V X left to right\n    [2, 4, 6] //X X right to left \n    ]; //to determine if arr full - def = true\n\n    let isArrayFull = this.isBoardFull(boardCards);\n\n    for (let i = 0; i < winnerCombination.length; i++) {\n      const _winnerCombination$i = _slicedToArray(winnerCombination[i], 3),\n            a = _winnerCombination$i[0],\n            b = _winnerCombination$i[1],\n            c = _winnerCombination$i[2];\n\n      if (boardCards[a] && boardCards[a] === boardCards[b] && boardCards[b] === boardCards[c]) {\n        return boardCards[a];\n      }\n    }\n\n    return isArrayFull ? 'undefined' : false;\n  },\n\n  //Check if board is full or not\n  isBoardFull(boardCards) {\n    for (let index = 0; index < boardCards.length; index++) {\n      if (boardCards[index] === null) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  checkStatus(winner, player, isAgainstRandom) {\n    if (winner === 'undefined') {\n      return \"No one won, it's a tie!\";\n    } else if (winner) {\n      return \"Winner is \".concat(winner, \"!\");\n    } else {\n      return \"You are against \".concat(isAgainstRandom ? 'Random' : 'AI', \" computer./n Now player \").concat(player ? 'X' : 'O', \" turn\");\n    }\n  }\n\n};","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/Status.js"],"names":["someoneIsWinner","boardCards","winnerCombination","isArrayFull","isBoardFull","i","length","a","b","c","index","checkStatus","winner","player","isAgainstRandom"],"mappings":";AAAA,eAAe;AACXA,EAAAA,eAAe,CAACC,UAAD,EAAY;AACvB;AACA,UAAMC,iBAAiB,GAAG,CACtB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADsB,EACb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFsB,EAEb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHsB,EAGd;AACR,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJsB,EAId;AACR,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CALsB,EAKb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CANsB,EAMb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPsB,EAOb;AACT,KAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARsB,CAQd;AARc,KAA1B,CAFuB,CAYvB;;AACA,QAAIC,WAAW,GAAG,KAAKC,WAAL,CAAiBH,UAAjB,CAAlB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,iBAAiB,CAACI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAAA,kDAC3BH,iBAAiB,CAACG,CAAD,CADU;AAAA,YACvCE,CADuC;AAAA,YACpCC,CADoC;AAAA,YACjCC,CADiC;;AAE/C,UAAGR,UAAU,CAACM,CAAD,CAAV,IACCN,UAAU,CAACM,CAAD,CAAV,KAAkBN,UAAU,CAACO,CAAD,CAD7B,IAECP,UAAU,CAACO,CAAD,CAAV,KAAkBP,UAAU,CAACQ,CAAD,CAFhC,EAEqC;AACjC,eAAOR,UAAU,CAACM,CAAD,CAAjB;AACH;AACJ;;AACD,WAAOJ,WAAW,GACR,WADQ,GAER,KAFV;AAGH,GA1BU;;AA2BX;AACAC,EAAAA,WAAW,CAACH,UAAD,EAAY;AACnB,SAAK,IAAIS,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGT,UAAU,CAACK,MAAvC,EAA+CI,KAAK,EAApD,EAAwD;AACpD,UAAGT,UAAU,CAACS,KAAD,CAAV,KAAsB,IAAzB,EAA8B;AAC1B,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAnCU;;AAoCXC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,eAAjB,EAAiC;AACxC,QAAGF,MAAM,KAAK,WAAd,EAA0B;AACtB;AACH,KAFD,MAEM,IAAGA,MAAH,EAAU;AACZ,iCAAoBA,MAApB;AACH,KAFK,MAED;AACD,uCAA0BE,eAAe,GAAG,QAAH,GAAc,IAAvD,qCAAsFD,MAAM,GAAG,GAAH,GAAS,GAArG;AACH;AACJ;;AA5CU,CAAf","sourcesContent":["export default {\r\n    someoneIsWinner(boardCards){\r\n        //Winner Combination\r\n        const winnerCombination = [\r\n            [0,1,2], //V rows first \r\n            [3,4,5], //V rows mid \r\n            [6,7,8],//V  rows last \r\n            [0,3,6],//V cols left\r\n            [1,4,7], //V cols mid\r\n            [2,5,8], //V  cols right\r\n            [0,4,8], //V X left to right\r\n            [2,4,6] //X X right to left \r\n        ]; \r\n        //to determine if arr full - def = true\r\n        let isArrayFull = this.isBoardFull(boardCards);\r\n        for (let i = 0; i < winnerCombination.length; i++) {\r\n            const [ a, b, c ] = winnerCombination[i];\r\n            if(boardCards[a] && \r\n                boardCards[a] === boardCards[b] && \r\n                boardCards[b] === boardCards[c]) {\r\n                return boardCards[a];\r\n            }\r\n        }\r\n        return isArrayFull \r\n                ? 'undefined'\r\n                : false;\r\n    },\r\n    //Check if board is full or not\r\n    isBoardFull(boardCards){\r\n        for (let index = 0; index < boardCards.length; index++) {\r\n            if(boardCards[index] === null){\r\n                return false; \r\n            }\r\n        }\r\n        return true; \r\n    },\r\n    checkStatus(winner, player, isAgainstRandom){\r\n        if(winner === 'undefined'){\r\n            return `No one won, it's a tie!`;\r\n        }else if(winner){\r\n            return `Winner is ${winner}!`\r\n        }else{\r\n            return `You are against ${isAgainstRandom ? 'Random' : 'AI'} computer./n Now player ${player ? 'X' : 'O'} turn`;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}