{"ast":null,"code":"export default {\n  availableSpotsOnArray(boardCards) {\n    let availableSpots = Array();\n\n    for (let i = 0; i < boardCards.length; i++) {\n      if (boardCards[i] >= 0 && boardCards[i] < 9) {\n        availableSpots.push(i);\n      }\n    }\n\n    return availableSpots;\n  },\n\n  MinimaxFunctionForAi(newBoard, isComputer) {\n    console.log(\"inside minimax function\"); // Check if there are available spots on board\n\n    let availableSpots = AIComputer.availableSpotsOnArray(newBoard); // console.log(\"NEW BOARD[0]\",newBoard[0])\n\n    if (Status.someoneIsWinner(newBoard) === 'X') {\n      return {\n        score: -10\n      };\n    } else if (Status.someoneIsWinner(newBoard) === 'O') {\n      return {\n        score: 10\n      };\n    } else if (availableSpots.length === 0) {\n      return {\n        score: 0\n      };\n    }\n\n    let moves = [];\n\n    for (let i = 0; i < availableSpots.length; i++) {\n      let move = {}; // console.log(\"newBoard[availableSpots[i]] = \", availableSpots[i])\n\n      move['index'] = newBoard[availableSpots[i]];\n      isComputer ? newBoard[availableSpots[i]] = 'O' : newBoard[availableSpots[i]] = 'X';\n\n      if (isComputer) {\n        //Computer Player\n        let result = MinimaxFunctionForAi(newBoard, false);\n        move.score = result.score;\n      } else {\n        //Human player\n        let result = MinimaxFunctionForAi(newBoard, true);\n        move.score = result.score;\n      }\n\n      newBoard[availableSpots[i]] = move.index;\n      moves.push(move);\n    }\n\n    let bestMove;\n\n    if (isComputer) {\n      let bestScore = -1000;\n\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score > bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    } else {\n      let bestScore = 1000;\n\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score < bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    } // console.log(moves);\n\n\n    return moves[bestMove];\n  }\n\n};","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/AIComputer.js"],"names":["availableSpotsOnArray","boardCards","availableSpots","Array","i","length","push","MinimaxFunctionForAi","newBoard","isComputer","console","log","AIComputer","Status","someoneIsWinner","score","moves","move","result","index","bestMove","bestScore"],"mappings":"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","sourcesContent":["export default {\r\n    availableSpotsOnArray(boardCards){\r\n        let availableSpots = Array(); \r\n        for (let i = 0; i < boardCards.length; i++) {\r\n            if(boardCards[i] >= 0 && boardCards[i] < 9){\r\n                availableSpots.push(i)\r\n            }\r\n        }\r\n        return availableSpots;\r\n    },\r\n    MinimaxFunctionForAi(newBoard, isComputer){\r\n        console.log(\"inside minimax function\")\r\n        // Check if there are available spots on board\r\n        let availableSpots = AIComputer.availableSpotsOnArray(newBoard);\r\n        // console.log(\"NEW BOARD[0]\",newBoard[0])\r\n        if(Status.someoneIsWinner(newBoard) === 'X'){\r\n            return { score: -10 };\r\n        }else if(Status.someoneIsWinner(newBoard) === 'O'){\r\n            return { score: 10 };\r\n        }else if(availableSpots.length === 0){\r\n            return{ score: 0 };            \r\n        }\r\n        let moves = [];\r\n        for (let i = 0; i < availableSpots.length; i++) {\r\n            let move = {}; \r\n            // console.log(\"newBoard[availableSpots[i]] = \", availableSpots[i])\r\n            move['index'] = newBoard[availableSpots[i]];\r\n            isComputer ? newBoard[availableSpots[i]] = 'O' : newBoard[availableSpots[i]] = 'X';\r\n            if(isComputer){\r\n                //Computer Player\r\n                let result = MinimaxFunctionForAi(newBoard, false);\r\n                move.score = result.score; \r\n            }else{\r\n                //Human player\r\n                let result = MinimaxFunctionForAi(newBoard, true);\r\n                move.score = result.score;\r\n            }\r\n            newBoard[availableSpots[i]] = move.index; \r\n            moves.push(move);          \r\n        }\r\n        let bestMove; \r\n        if(isComputer){\r\n            let bestScore = -1000;\r\n            for (let i = 0; i < moves.length; i++) {\r\n                if(moves[i].score > bestScore){\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }                \r\n            }\r\n        }else{\r\n            let bestScore = 1000;\r\n            for (let i = 0; i < moves.length; i++) {\r\n                if(moves[i].score < bestScore){\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }                \r\n            }\r\n        }\r\n        // console.log(moves);\r\n        return moves[bestMove];\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}