{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\src\\\\Components\\\\GameLogic\\\\GameLogic.js\";\nimport React, { useState } from 'react';\nimport Board from '../Board/Board';\nimport './GameLogic.css';\nimport Status from './Status';\nimport SettingsModal from './SettingsModal';\n\nconst GameLogic = () => {\n  //Init state for board and player turn\n  const _useState = useState(Array(9).fill(null)),\n        _useState2 = _slicedToArray(_useState, 2),\n        boardCards = _useState2[0],\n        setBoardCards = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        playerXturn = _useState4[0],\n        setPlayerXturn = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        settingsModal = _useState6[0],\n        setSettingsModal = _useState6[1]; //Player on click function\n\n\n  const playerClickOnCard = index => {\n    const cardsArr = [...boardCards];\n\n    if (Status.someoneIsWinner(cardsArr) || cardsArr[index]) {\n      return;\n    } //put value in the arr depends on player\n\n\n    cardsArr[index] = playerXturn ? 'X' : 'O'; //update params\n\n    setBoardCards(cardsArr);\n    setPlayerXturn(!playerXturn);\n  }; //Reset Board\n\n\n  const resetBoard = () => {\n    setBoardCards(Array(9).fill(null));\n    setPlayerXturn(true);\n  }; //Game Settings\n\n\n  const gameSettings = () => {\n    console.log(\"inside game settings button\");\n    setSettingsModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setSettingsModal(false);\n  }; //Computer turn - Random computer chose\n\n\n  const RandomComputerTurn = () => {\n    if (!playerXturn && !Status.isBoardFull(boardCards)) {\n      //Chosing rand num while board is not full \n      let randNum = Math.floor(Math.random() * 10);\n\n      do {\n        randNum = Math.floor(Math.random() * 10);\n      } while (!Status.isBoardFull(boardCards) && boardCards[randNum] !== null);\n\n      playerClickOnCard(randNum);\n    }\n\n    return null;\n  }; //Game run\n\n\n  const winner = Status.someoneIsWinner(boardCards);\n  let status = Status.checkStatus(winner, playerXturn);\n  RandomComputerTurn();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: 'status',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, status), React.createElement(\"div\", {\n    id: 'gameButtonsWrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'gameButtons',\n    onClick: gameSettings,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Settings\"), React.createElement(\"button\", {\n    className: 'gameButtons',\n    onClick: resetBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Reset Board\")), React.createElement(Board, {\n    id: \"board\",\n    winner: winner,\n    playerClickOnCard: playerClickOnCard,\n    boardCards: boardCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), settingsModal ? React.createElement(SettingsModal, {\n    shoe: settingsModal,\n    handleCloseModal: handleCloseModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }) : null);\n};\n\nexport default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","Board","Status","SettingsModal","GameLogic","Array","fill","boardCards","setBoardCards","playerXturn","setPlayerXturn","settingsModal","setSettingsModal","playerClickOnCard","index","cardsArr","someoneIsWinner","resetBoard","gameSettings","console","log","handleCloseModal","RandomComputerTurn","isBoardFull","randNum","Math","floor","random","winner","status","checkStatus"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nimport Status from './Status';\r\nimport SettingsModal from './SettingsModal';\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    const [ settingsModal, setSettingsModal ] = useState(false);\r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(Status.someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        //put value in the arr depends on player\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        //update params\r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n\r\n    }\r\n\r\n    //Reset Board\r\n    const resetBoard = () => {\r\n        setBoardCards(Array(9).fill(null));\r\n        setPlayerXturn(true);\r\n    }\r\n    //Game Settings\r\n    const gameSettings = () => {\r\n        console.log(\"inside game settings button\")\r\n        setSettingsModal(true);\r\n    }\r\n    const handleCloseModal = () => {\r\n        setSettingsModal(false);\r\n    }\r\n    //Computer turn - Random computer chose\r\n    const RandomComputerTurn = () => {\r\n        if(!playerXturn && !Status.isBoardFull(boardCards)){\r\n            //Chosing rand num while board is not full \r\n            let randNum = Math.floor(Math.random() * 10);\r\n            do {\r\n                randNum = Math.floor(Math.random() * 10);\r\n            } while(!Status.isBoardFull(boardCards) && boardCards[randNum] !== null)   \r\n            playerClickOnCard(randNum); \r\n        }\r\n        return null;\r\n    }\r\n\r\n    //Game run\r\n    const winner = Status.someoneIsWinner(boardCards); \r\n    let status = Status.checkStatus(winner, playerXturn); \r\n    RandomComputerTurn(); \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <div id={'gameButtonsWrapper'}>\r\n                <button className={'gameButtons'} onClick={gameSettings}>Settings</button>\r\n                <button className={'gameButtons'} onClick={resetBoard}>Reset Board</button>\r\n            </div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/>\r\n            {settingsModal ? <SettingsModal shoe={settingsModal} handleCloseModal={handleCloseModal}/> : null}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}