{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\src\\\\Components\\\\GameLogic\\\\GameLogic.js\";\nimport React, { useState } from 'react';\nimport Board from '../Board/Board';\nimport './GameLogic.css';\nimport Status from './Status';\nimport SettingsModal from './SettingsModal';\nimport AIComputer from './AIComputer';\n\nconst GameLogic = () => {\n  //Init state for board and player turn\n  const _useState = useState(Array(9).fill(null)),\n        _useState2 = _slicedToArray(_useState, 2),\n        boardCards = _useState2[0],\n        setBoardCards = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isAgainstRandom = _useState4[0],\n        setIsAgainstRandom = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        playerXturn = _useState6[0],\n        setPlayerXturn = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        settingsModal = _useState8[0],\n        setSettingsModal = _useState8[1]; //Player on click function\n\n\n  const playerClickOnCard = index => {\n    const cardsArr = [...boardCards];\n\n    if (Status.someoneIsWinner(cardsArr) || cardsArr[index]) {\n      return;\n    } //put value in the arr depends on player\n\n\n    cardsArr[index] = playerXturn ? 'X' : 'O'; //update params\n\n    setBoardCards(cardsArr);\n    setPlayerXturn(!playerXturn);\n  }; //Reset Board\n\n\n  const resetBoard = () => {\n    setBoardCards(Array(9).fill(null));\n    setPlayerXturn(true);\n  }; //Game Settings\n\n\n  const gameSettings = () => {\n    console.log(\"inside game settings button\");\n    setSettingsModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setSettingsModal(false);\n  };\n\n  const handleOnChangeModal = fromChild => {\n    console.log(\"param parent is against random = \", isAgainstRandom);\n    console.log(\"inside on change handle modal, param from child = \", fromChild);\n    setIsAgainstRandom(fromChild);\n  }; //Computer turn \n\n\n  const computerTurn = () => {\n    isAgainstRandom ? playerClickOnCard(RandomComputerTurn()) : playerClickOnCard(AIComputerTurn());\n  }; //Random computer chose\n\n\n  const RandomComputerTurn = () => {\n    if (!playerXturn && !Status.isBoardFull(boardCards)) {\n      //Choosing rand num while board is not full \n      let randNum = Math.floor(Math.random() * 10);\n\n      do {\n        randNum = Math.floor(Math.random() * 10);\n      } while (!Status.isBoardFull(boardCards) && boardCards[randNum] !== null);\n\n      return randNum;\n    }\n\n    return null;\n  }; // Computer Turn - AI computer \n\n\n  const AIComputerTurn = () => {\n    console.log(\"inside AI computer turn function\"); // Minimax function need to return the index that the computer turn \n\n    let newCardsFills = boardCards.map((value, i) => {\n      return value ? value : i;\n    });\n    let toReturn = MinimaxFunctionForAi(newCardsFills, true);\n    console.log(\"RESULT FROM AI = \", toReturn);\n    return toReturn.index;\n  };\n\n  const MinimaxFunctionForAi = (newBoard, isComputer) => {\n    console.log(\"inside minimax function\"); // Check if there are available spots on board\n\n    let availableSpots = AIComputer.availableSpotsOnArray(newBoard); // console.log(\"NEW BOARD[0]\",newBoard[0])\n\n    if (Status.someoneIsWinner(newBoard) === 'X') {\n      return {\n        score: -10\n      };\n    } else if (Status.someoneIsWinner(newBoard) === 'O') {\n      return {\n        score: 10\n      };\n    } else if (availableSpots.length === 0) {\n      return {\n        score: 0\n      };\n    }\n\n    let moves = [];\n\n    for (let i = 0; i < availableSpots.length; i++) {\n      let move = {}; // console.log(\"newBoard[availableSpots[i]] = \", availableSpots[i])\n\n      move['index'] = newBoard[availableSpots[i]];\n      isComputer ? newBoard[availableSpots[i]] = 'O' : newBoard[availableSpots[i]] = 'X';\n\n      if (isComputer) {\n        //Computer Player\n        let result = MinimaxFunctionForAi(newBoard, false);\n        move.score = result.score;\n      } else {\n        //Human player\n        let result = MinimaxFunctionForAi(newBoard, true);\n        move.score = result.score;\n      }\n\n      newBoard[availableSpots[i]] = move.index;\n      moves.push(move);\n    }\n\n    let bestMove;\n\n    if (isComputer) {\n      let bestScore = -1000;\n\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score > bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    } else {\n      let bestScore = 1000;\n\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score < bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    } // console.log(moves);\n\n\n    return moves[bestMove];\n  }; //Game run\n\n\n  const winner = Status.someoneIsWinner(boardCards);\n  let status = Status.checkStatus(winner, playerXturn);\n\n  if (!playerXturn) {\n    //computer Turn\n    computerTurn();\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: 'status',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, status), React.createElement(\"div\", {\n    id: 'gameButtonsWrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'gameButtons',\n    onClick: gameSettings,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Settings\"), React.createElement(\"button\", {\n    className: 'gameButtons',\n    onClick: resetBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Reset Board\")), React.createElement(Board, {\n    id: \"board\",\n    winner: winner,\n    playerClickOnCard: playerClickOnCard,\n    boardCards: boardCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), settingsModal ? React.createElement(SettingsModal, {\n    show: settingsModal,\n    handleOnChangeModal: handleOnChangeModal,\n    handleCloseModal: handleCloseModal,\n    isAgainstRandom: isAgainstRandom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }) : null);\n};\n\nexport default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","Board","Status","SettingsModal","AIComputer","GameLogic","Array","fill","boardCards","setBoardCards","isAgainstRandom","setIsAgainstRandom","playerXturn","setPlayerXturn","settingsModal","setSettingsModal","playerClickOnCard","index","cardsArr","someoneIsWinner","resetBoard","gameSettings","console","log","handleCloseModal","handleOnChangeModal","fromChild","computerTurn","RandomComputerTurn","AIComputerTurn","isBoardFull","randNum","Math","floor","random","newCardsFills","map","value","i","toReturn","MinimaxFunctionForAi","newBoard","isComputer","availableSpots","availableSpotsOnArray","score","length","moves","move","result","push","bestMove","bestScore","winner","status","checkStatus"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nimport Status from './Status';\r\nimport SettingsModal from './SettingsModal';\r\nimport AIComputer from './AIComputer';\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ isAgainstRandom, setIsAgainstRandom] = useState(true);\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    const [ settingsModal, setSettingsModal ] = useState(false);\r\n    \r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(Status.someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        //put value in the arr depends on player\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        //update params\r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n    }\r\n\r\n    //Reset Board\r\n    const resetBoard = () => {\r\n        setBoardCards(Array(9).fill(null));\r\n        setPlayerXturn(true);\r\n    }\r\n\r\n    //Game Settings\r\n    const gameSettings = () => {\r\n        console.log(\"inside game settings button\")\r\n        setSettingsModal(true);\r\n    }\r\n    const handleCloseModal = () => {\r\n        setSettingsModal(false);\r\n    }\r\n    const handleOnChangeModal = ( fromChild ) => {\r\n        console.log(\"param parent is against random = \", isAgainstRandom)\r\n        console.log(\"inside on change handle modal, param from child = \", fromChild ); \r\n        setIsAgainstRandom(fromChild);\r\n    }\r\n    //Computer turn \r\n    const computerTurn = () => {\r\n        (isAgainstRandom) ? playerClickOnCard(RandomComputerTurn()) : playerClickOnCard(AIComputerTurn());\r\n    }\r\n    //Random computer chose\r\n    const RandomComputerTurn = () => {\r\n        if(!playerXturn && !Status.isBoardFull(boardCards)){\r\n            //Choosing rand num while board is not full \r\n            let randNum = Math.floor(Math.random() * 10);\r\n            do {\r\n                randNum = Math.floor(Math.random() * 10);\r\n            } while(!Status.isBoardFull(boardCards) && boardCards[randNum] !== null)   \r\n            return (randNum); \r\n        }\r\n        return null;\r\n    }\r\n    // Computer Turn - AI computer \r\n    const AIComputerTurn = () => {\r\n        console.log(\"inside AI computer turn function\");\r\n        // Minimax function need to return the index that the computer turn \r\n        let newCardsFills = boardCards.map((value, i)  => {\r\n            return (value) ? value : i;\r\n        })\r\n        let toReturn = MinimaxFunctionForAi(newCardsFills, true)\r\n        console.log(\"RESULT FROM AI = \", toReturn);\r\n        return toReturn.index;\r\n    }\r\n    const MinimaxFunctionForAi = (newBoard, isComputer) => {\r\n        console.log(\"inside minimax function\")\r\n        // Check if there are available spots on board\r\n        let availableSpots = AIComputer.availableSpotsOnArray(newBoard);\r\n        // console.log(\"NEW BOARD[0]\",newBoard[0])\r\n        if(Status.someoneIsWinner(newBoard) === 'X'){\r\n            return { score: -10 };\r\n        }else if(Status.someoneIsWinner(newBoard) === 'O'){\r\n            return { score: 10 };\r\n        }else if(availableSpots.length === 0){\r\n            return{ score: 0 };            \r\n        }\r\n        let moves = [];\r\n        for (let i = 0; i < availableSpots.length; i++) {\r\n            let move = {}; \r\n            // console.log(\"newBoard[availableSpots[i]] = \", availableSpots[i])\r\n            move['index'] = newBoard[availableSpots[i]];\r\n            isComputer ? newBoard[availableSpots[i]] = 'O' : newBoard[availableSpots[i]] = 'X';\r\n            if(isComputer){\r\n                //Computer Player\r\n                let result = MinimaxFunctionForAi(newBoard, false);\r\n                move.score = result.score; \r\n            }else{\r\n                //Human player\r\n                let result = MinimaxFunctionForAi(newBoard, true);\r\n                move.score = result.score;\r\n            }\r\n            newBoard[availableSpots[i]] = move.index; \r\n            moves.push(move);          \r\n        }\r\n        let bestMove; \r\n        if(isComputer){\r\n            let bestScore = -1000;\r\n            for (let i = 0; i < moves.length; i++) {\r\n                if(moves[i].score > bestScore){\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }                \r\n            }\r\n\r\n        }else{\r\n            let bestScore = 1000;\r\n            for (let i = 0; i < moves.length; i++) {\r\n                if(moves[i].score < bestScore){\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }                \r\n            }\r\n        }\r\n        // console.log(moves);\r\n        return moves[bestMove];\r\n    }\r\n\r\n    //Game run\r\n    const winner = Status.someoneIsWinner(boardCards); \r\n    let status = Status.checkStatus(winner, playerXturn); \r\n    if(!playerXturn){\r\n        //computer Turn\r\n        computerTurn();\r\n    } \r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <div id={'gameButtonsWrapper'}>\r\n                <button className={'gameButtons'} onClick={gameSettings}>Settings</button>\r\n                <button className={'gameButtons'} onClick={resetBoard}>Reset Board</button>\r\n            </div>\r\n            <Board  id={`board` }\r\n                    winner={winner}\r\n                    playerClickOnCard={playerClickOnCard}\r\n                    boardCards={boardCards}/> \r\n            {/* Modal for Settings */}\r\n            {settingsModal ? <SettingsModal \r\n                                    show={settingsModal} \r\n                                    handleOnChangeModal={handleOnChangeModal} \r\n                                    handleCloseModal={handleCloseModal}\r\n                                    isAgainstRandom={isAgainstRandom}/> \r\n                            : null}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}