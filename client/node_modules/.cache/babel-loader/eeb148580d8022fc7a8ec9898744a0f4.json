{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My Personal Projects\\\\TicTacTao-React\\\\client\\\\src\\\\Components\\\\GameLogic\\\\GameLogic.js\";\nimport React, { useState, useEffect } from 'react';\nimport Board from '../Board/Board';\nimport './GameLogic.css';\nimport Status from './Status';\nimport SettingsModal from './SettingsModal';\nimport AIComputer from './AIComputer';\nimport { SemipolarLoading } from 'react-loadingg';\n\nconst GameLogic = () => {\n  //Init state for board and player turn\n  const _useState = useState(Array(9).fill(null)),\n        _useState2 = _slicedToArray(_useState, 2),\n        boardCards = _useState2[0],\n        setBoardCards = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isAgainstRandom = _useState4[0],\n        setIsAgainstRandom = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        playerXturn = _useState6[0],\n        setPlayerXturn = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        settingsModal = _useState8[0],\n        setSettingsModal = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isLoading = _useState10[0],\n        setIsLoading = _useState10[1]; //Player on click function\n\n\n  const playerClickOnCard = index => {\n    const cardsArr = [...boardCards];\n\n    if (Status.someoneIsWinner(cardsArr) || cardsArr[index]) {\n      return;\n    } //put value in the arr depends on player\n\n\n    cardsArr[index] = playerXturn ? 'X' : 'O'; //update params\n\n    setBoardCards(cardsArr);\n    setPlayerXturn(!playerXturn);\n  }; //Reset Board\n\n\n  const resetBoard = () => {\n    setBoardCards(Array(9).fill(null));\n    setPlayerXturn(true);\n  }; //Game Settings\n\n\n  const gameSettings = () => {\n    console.log(\"inside game settings button\");\n    setSettingsModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setSettingsModal(false);\n  };\n\n  const handleOnChangeModal = fromChild => {\n    console.log(\"param parent is against random = \", isAgainstRandom);\n    console.log(\"inside on change handle modal, param from child = \", fromChild);\n    setIsAgainstRandom(fromChild);\n  }; //Computer turn \n\n\n  const computerTurn = () => {\n    isAgainstRandom ? playerClickOnCard(RandomComputerTurn()) : playerClickOnCard(AIComputerTurn());\n  }; //Random computer chose\n\n\n  const RandomComputerTurn = () => {\n    if (!playerXturn && !Status.isBoardFull(boardCards)) {\n      //Choosing rand num while board is not full \n      let randNum = Math.floor(Math.random() * 10);\n\n      do {\n        randNum = Math.floor(Math.random() * 10);\n      } while (!Status.isBoardFull(boardCards) && boardCards[randNum] !== null);\n\n      return randNum;\n    }\n\n    return null;\n  }; // Computer Turn - AI computer \n\n\n  const AIComputerTurn = () => {\n    // Minimax function need to return the index that the computer turn \n    let newCardsFills = boardCards.map((value, i) => {\n      return value ? value : i;\n    });\n    let toReturn = AIComputer.MinimaxFunctionForAi(newCardsFills, true);\n    return toReturn.index;\n  };\n\n  let winner, status; //Game run\n\n  useEffect(() => {\n    winner = Status.someoneIsWinner(boardCards);\n    status = Status.checkStatus(winner, playerXturn);\n    setIsLoading(!isLoading);\n\n    if (!playerXturn) {\n      //computer Turn\n      computerTurn();\n    }\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: 'status',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, status), React.createElement(\"div\", {\n    id: 'gameButtonsWrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'gameButtons',\n    onClick: gameSettings,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Settings\"), React.createElement(\"button\", {\n    className: 'gameButtons',\n    onClick: resetBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Reset Board\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Board, {\n    id: \"board\",\n    winner: winner,\n    playerClickOnCard: playerClickOnCard,\n    boardCards: boardCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), isLoading ? React.createElement(SemipolarLoading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }) : null), settingsModal ? React.createElement(SettingsModal, {\n    show: settingsModal,\n    handleOnChangeModal: handleOnChangeModal,\n    handleCloseModal: handleCloseModal,\n    isAgainstRandom: isAgainstRandom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }) : null);\n};\n\nexport default GameLogic;","map":{"version":3,"sources":["D:/My Personal Projects/TicTacTao-React/client/src/Components/GameLogic/GameLogic.js"],"names":["React","useState","useEffect","Board","Status","SettingsModal","AIComputer","SemipolarLoading","GameLogic","Array","fill","boardCards","setBoardCards","isAgainstRandom","setIsAgainstRandom","playerXturn","setPlayerXturn","settingsModal","setSettingsModal","isLoading","setIsLoading","playerClickOnCard","index","cardsArr","someoneIsWinner","resetBoard","gameSettings","console","log","handleCloseModal","handleOnChangeModal","fromChild","computerTurn","RandomComputerTurn","AIComputerTurn","isBoardFull","randNum","Math","floor","random","newCardsFills","map","value","i","toReturn","MinimaxFunctionForAi","winner","status","checkStatus"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react'; \r\nimport Board from '../Board/Board';\r\nimport './GameLogic.css';\r\nimport Status from './Status';\r\nimport SettingsModal from './SettingsModal';\r\nimport AIComputer from './AIComputer';\r\nimport { SemipolarLoading } from 'react-loadingg';\r\n\r\nconst GameLogic = () => {\r\n    //Init state for board and player turn\r\n    const [ boardCards, setBoardCards ] = useState(Array(9).fill(null));\r\n    const [ isAgainstRandom, setIsAgainstRandom] = useState(true);\r\n    const [ playerXturn, setPlayerXturn] = useState(true); \r\n    const [ settingsModal, setSettingsModal ] = useState(false);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n\r\n    //Player on click function\r\n    const playerClickOnCard = (index) => {\r\n        const cardsArr = [...boardCards]; \r\n        if(Status.someoneIsWinner(cardsArr) || cardsArr[index]){\r\n            return; \r\n        }\r\n        //put value in the arr depends on player\r\n        cardsArr[index] = playerXturn ? 'X' : 'O'; \r\n        //update params\r\n        setBoardCards(cardsArr); \r\n        setPlayerXturn(!playerXturn); \r\n    }\r\n\r\n    //Reset Board\r\n    const resetBoard = () => {\r\n        setBoardCards(Array(9).fill(null));\r\n        setPlayerXturn(true);\r\n    }\r\n\r\n    //Game Settings\r\n    const gameSettings = () => {\r\n        console.log(\"inside game settings button\")\r\n        setSettingsModal(true);\r\n    }\r\n    const handleCloseModal = () => {\r\n        setSettingsModal(false);\r\n    }\r\n    const handleOnChangeModal = ( fromChild ) => {\r\n        console.log(\"param parent is against random = \", isAgainstRandom)\r\n        console.log(\"inside on change handle modal, param from child = \", fromChild ); \r\n        setIsAgainstRandom(fromChild);\r\n    }\r\n    //Computer turn \r\n    const computerTurn = () => {\r\n        (isAgainstRandom) ? playerClickOnCard(RandomComputerTurn()) : playerClickOnCard(AIComputerTurn());\r\n    }\r\n    //Random computer chose\r\n    const RandomComputerTurn = () => {\r\n        if(!playerXturn && !Status.isBoardFull(boardCards)){\r\n            //Choosing rand num while board is not full \r\n            let randNum = Math.floor(Math.random() * 10);\r\n            do {\r\n                randNum = Math.floor(Math.random() * 10);\r\n            } while(!Status.isBoardFull(boardCards) && boardCards[randNum] !== null)   \r\n            return (randNum); \r\n        }\r\n        return null;\r\n    }\r\n    // Computer Turn - AI computer \r\n    const AIComputerTurn = () => {\r\n        // Minimax function need to return the index that the computer turn \r\n        let newCardsFills = boardCards.map((value, i)  => {\r\n            return (value) ? value : i;\r\n        })\r\n        let toReturn = AIComputer.MinimaxFunctionForAi(newCardsFills, true)\r\n        return toReturn.index;\r\n    }\r\n    let winner, status; \r\n\r\n    //Game run\r\n    useEffect(() => {\r\n        winner = Status.someoneIsWinner(boardCards); \r\n        status = Status.checkStatus(winner, playerXturn); \r\n        setIsLoading(!isLoading)\r\n        if(!playerXturn){\r\n            //computer Turn\r\n            computerTurn();\r\n        }\r\n    })\r\n    return(\r\n        <div>\r\n            <div id={'status'}>{status}</div>\r\n            <div id={'gameButtonsWrapper'}>\r\n                <button className={'gameButtons'} onClick={gameSettings}>Settings</button>\r\n                <button className={'gameButtons'} onClick={resetBoard}>Reset Board</button>\r\n            </div>\r\n            <div>\r\n                <Board  id={`board` }\r\n                        winner={winner}\r\n                        playerClickOnCard={playerClickOnCard}\r\n                        boardCards={boardCards}/> \r\n                {isLoading ? <SemipolarLoading /> : null} \r\n            </div>\r\n            {/* Modal for Settings */}\r\n            {settingsModal ? <SettingsModal \r\n                                    show={settingsModal} \r\n                                    handleOnChangeModal={handleOnChangeModal} \r\n                                    handleCloseModal={handleCloseModal}\r\n                                    isAgainstRandom={isAgainstRandom}/> \r\n                            : null}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}